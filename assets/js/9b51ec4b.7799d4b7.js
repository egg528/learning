"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[8130],{3905:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>g});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},l=Object.keys(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var u=r.createContext({}),p=function(e){var t=r.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},s=function(e){var t=p(e.components);return r.createElement(u.Provider,{value:t},e.children)},c="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,l=e.originalType,u=e.parentName,s=o(e,["components","mdxType","originalType","parentName"]),c=p(n),d=a,g=c["".concat(u,".").concat(d)]||c[d]||m[d]||l;return n?r.createElement(g,i(i({ref:t},s),{},{components:n})):r.createElement(g,i({ref:t},s))}));function g(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var l=n.length,i=new Array(l);i[0]=d;var o={};for(var u in t)hasOwnProperty.call(t,u)&&(o[u]=t[u]);o.originalType=e,o[c]="string"==typeof e?e:a,i[1]=o;for(var p=2;p<l;p++)i[p]=n[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},6664:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>i,default:()=>m,frontMatter:()=>l,metadata:()=>o,toc:()=>p});var r=n(7462),a=(n(7294),n(3905));const l={title:"02. Project Reactor - Testing",sidebar_position:9,tag:["book","reactive-programming"]},i=void 0,o={unversionedId:"reactive-programming/9",id:"reactive-programming/9",title:"02. Project Reactor - Testing",description:"1. StepVerifier\ub97c \uc0ac\uc6a9\ud55c \ud14c\uc2a4\ud305",source:"@site/docs/project/reactive-programming/9.md",sourceDirName:"reactive-programming",slug:"/reactive-programming/9",permalink:"/project/reactive-programming/9",draft:!1,tags:[],version:"current",sidebarPosition:9,frontMatter:{title:"02. Project Reactor - Testing",sidebar_position:9,tag:["book","reactive-programming"]},sidebar:"tutorialSidebar",previous:{title:"02. Project Reactor - Debugging",permalink:"/project/reactive-programming/8"},next:{title:"\ub3d9\uc2dc \uc694\uccad - \uc11c\ube14\ub9bf \uba40\ud2f0 \uc4f0\ub808\ub4dc",permalink:"/project/servlet-multi-thread"}},u={},p=[{value:"1. StepVerifier\ub97c \uc0ac\uc6a9\ud55c \ud14c\uc2a4\ud305",id:"1-stepverifier\ub97c-\uc0ac\uc6a9\ud55c-\ud14c\uc2a4\ud305",level:2},{value:"Signal \uc774\ubca4\ud2b8 \ud14c\uc2a4\ud2b8",id:"signal-\uc774\ubca4\ud2b8-\ud14c\uc2a4\ud2b8",level:3},{value:"expectXXXX() \uba54\uc11c\ub4dc",id:"expectxxxx-\uba54\uc11c\ub4dc",level:4},{value:"verifyXXXXX() \uba54\uc11c\ub4dc",id:"verifyxxxxx-\uba54\uc11c\ub4dc",level:4},{value:"as\ub97c \ud65c\uc6a9\ud55c \uc2e4\ud328 message logging",id:"as\ub97c-\ud65c\uc6a9\ud55c-\uc2e4\ud328-message-logging",level:4},{value:"\uc624\ub958 \ubc1c\uc0dd\uc744 \uae30\ub300\ud560 \ub54c expectError()",id:"\uc624\ub958-\ubc1c\uc0dd\uc744-\uae30\ub300\ud560-\ub54c-expecterror",level:4},{value:"\uc624\ub958 \uc2e4\ud328 \uc2dc \uc6d0\ud558\ub294 \uc2dc\ub098\ub9ac\uc624 \uba85\uc744 \ucd9c\ub825\ud558\uace0 \uc2f6\uc744 \ub584",id:"\uc624\ub958-\uc2e4\ud328-\uc2dc-\uc6d0\ud558\ub294-\uc2dc\ub098\ub9ac\uc624-\uba85\uc744-\ucd9c\ub825\ud558\uace0-\uc2f6\uc744-\ub584",level:4},{value:"\uc2dc\uac04 \uae30\ubc18(Time-based) \ud14c\uc2a4\ud2b8",id:"\uc2dc\uac04-\uae30\ubc18time-based-\ud14c\uc2a4\ud2b8",level:3},{value:"\uc2dc\uac04\uc744 \uc55e\ub2f9\uaca8\uc11c \ud14c\uc2a4\ud2b8\ud558\ub294 \uc608\uc2dc",id:"\uc2dc\uac04\uc744-\uc55e\ub2f9\uaca8\uc11c-\ud14c\uc2a4\ud2b8\ud558\ub294-\uc608\uc2dc",level:4},{value:"verify Timeout\uc744 \ub450\ub294 \uc608\uc2dc",id:"verify-timeout\uc744-\ub450\ub294-\uc608\uc2dc",level:4},{value:"expectNoEvent()\ub97c \ud65c\uc6a9\ud55c \uc2dc\uac04 \uc55e\ub2f9\uae40",id:"expectnoevent\ub97c-\ud65c\uc6a9\ud55c-\uc2dc\uac04-\uc55e\ub2f9\uae40",level:4},{value:"Backpressure \ud14c\uc2a4\ud2b8",id:"backpressure-\ud14c\uc2a4\ud2b8",level:3},{value:"Context \ud14c\uc2a4\ud2b8",id:"context-\ud14c\uc2a4\ud2b8",level:3},{value:"Record \uae30\ubc18 \ud14c\uc2a4\ud2b8",id:"record-\uae30\ubc18-\ud14c\uc2a4\ud2b8",level:3},{value:"2. TestPublisher\ub97c \uc0ac\uc6a9\ud55c \ud14c\uc2a4\ud305",id:"2-testpublisher\ub97c-\uc0ac\uc6a9\ud55c-\ud14c\uc2a4\ud305",level:2},{value:"\uc815\uc0c1 \ub3d9\uc791\ud558\ub294(Well-behaved) TestPublisher",id:"\uc815\uc0c1-\ub3d9\uc791\ud558\ub294well-behaved-testpublisher",level:3},{value:"\uc624\ub3d9\uc791\ud558\ub294(Misbehaving) TestPublisher",id:"\uc624\ub3d9\uc791\ud558\ub294misbehaving-testpublisher",level:3},{value:"3. PublisherProbe\ub97c \uc0ac\uc6a9\ud55c \ud14c\uc2a4\ud305",id:"3-publisherprobe\ub97c-\uc0ac\uc6a9\ud55c-\ud14c\uc2a4\ud305",level:2}],s={toc:p},c="wrapper";function m(e){let{components:t,...n}=e;return(0,a.kt)(c,(0,r.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"1-stepverifier\ub97c-\uc0ac\uc6a9\ud55c-\ud14c\uc2a4\ud305"},"1. StepVerifier\ub97c \uc0ac\uc6a9\ud55c \ud14c\uc2a4\ud305"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"StepVerifier\ub780 Operator \uccb4\uc778\uc758 \ub2e4\uc591\ud55c \ub3d9\uc791 \ubc29\uc2dd\uc744 \ud14c\uc2a4\ud2b8\ud558\uae30 \uc704\ud55c API")),(0,a.kt)("h3",{id:"signal-\uc774\ubca4\ud2b8-\ud14c\uc2a4\ud2b8"},"Signal \uc774\ubca4\ud2b8 \ud14c\uc2a4\ud2b8"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},'@Test\npublic void sayHelloReactorTest() {\n    StepVerifier.create(Mono.just("Hello Reactor"))\n            .expectNext("Hello Reactor") // emit \ub370\uc774\ud130\uc758 \uae30\ub300\uac12 \ud3c9\uac00\n            .expectComplete() // onComplete Signal \uae30\ub300\uac12 \ud3c9\uac00\n            .verify(); // \uac80\uc99d \uc2e4\ud589\n}\n')),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"create()\ub97c \ud1b5\ud574 \ud14c\uc2a4\ud2b8 \ub300\uc0c1 Sequence \uc0dd\uc131"),(0,a.kt)("li",{parentName:"ol"},"expect~() \uba54\uc11c\ub4dc\ub85c \uc608\uc0c1\ub418\ub294 Signal\uc758 \uae30\ub300\uac12 \ud3c9\uac00"),(0,a.kt)("li",{parentName:"ol"},"verify()\ub97c \ud638\ucd9c\ud574 \uc804\uccb4 Operator \uccb4\uc778\uc758 \ud14c\uc2a4\ud2b8\ub97c \ud2b8\ub9ac\uac70")),(0,a.kt)("h4",{id:"expectxxxx-\uba54\uc11c\ub4dc"},"expectXXXX() \uba54\uc11c\ub4dc"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"\uba54\uc11c\ub4dc"),(0,a.kt)("th",{parentName:"tr",align:null},"\uc124\uba85"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"expectSubscription()"),(0,a.kt)("td",{parentName:"tr",align:null},"\uad6c\ub3c5\uc774 \uc774\ub8e8\uc5b4\uc9d0\uc744 \uae30\ub300\ud55c\ub2e4")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"expectNext()"),(0,a.kt)("td",{parentName:"tr",align:null},"onNext Signal\uc744 \ud1b5\ud574 \uc804\ub2ec\ub418\ub294 \uac12\uc774 \ud30c\ub77c\ubbf8\ud130\ub85c \uc804\ub2ec\ub41c \uac12\uacfc \uac19\uc74c\uc744 \uae30\ub300\ud55c\ub2e4.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"expectComplete()"),(0,a.kt)("td",{parentName:"tr",align:null},"onComplete Signal\uc774 \uc804\uc1a1\ub418\uae30\ub97c \uae30\ub300\ud55c\ub2e4.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"expectError()"),(0,a.kt)("td",{parentName:"tr",align:null},"onError Signal\uc774 \uc804\uc1a1\ub418\uae30\ub97c \uae30\ub300\ud55c\ub2e4.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"expectNextCount(long count)"),(0,a.kt)("td",{parentName:"tr",align:null},"\uad6c\ub3c5 \uc2dc\uc810 \ub610\ub294 \uc774\uc804 expectNext()\ub97c \ud1b5\ud574 \uae30\ub313\uac12\uc774 \ud3c9\uac00\ub41c \ub370\uc774\ud130 \uc774\ud6c4\ubd80\ud130 emit\ub41c \uc218\ub97c \uae30\ub300\ud55c\ub2e4.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"expectNoEvent(Duration duration)"),(0,a.kt)("td",{parentName:"tr",align:null},"\uc8fc\uc5b4\uc9c4 \uc2dc\uac04 \ub3d9\uc548 Signal \uc774\ubca4\ud2b8\uac00 \ubc1c\uc0dd\ud558\uc9c0 \uc54a\uc558\uc74c\uc744 \uae30\ub300\ud55c\ub2e4.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"expectAccessibleContext()"),(0,a.kt)("td",{parentName:"tr",align:null},"\uad6c\ub3c5 \uc2dc\uc810 \uc774\ud6c4\uc5d0 Context\uac00 \uc804\ud30c\ub418\uc5c8\uc74c\uc744 \uae30\ub300\ub41c\ub2e4.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"expectNextSequence(Iterable <? extends T>)"),(0,a.kt)("td",{parentName:"tr",align:null},"emit\ub41c \ub370\uc774\ud130\ub4e4\uc774 \ud30c\ub77c\ubbf8\ud130\ub85c \uc804\ub2ec\ub41c Iterable\uc758 \uc694\uc18c\uc640 \ub9e4\uce58\ub428\uc744 \uae30\ub300\ud55c\ub2e4.")))),(0,a.kt)("h4",{id:"verifyxxxxx-\uba54\uc11c\ub4dc"},"verifyXXXXX() \uba54\uc11c\ub4dc"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"\uba54\uc11c\ub4dc"),(0,a.kt)("th",{parentName:"tr",align:null},"\uc124\uba85"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"verify()"),(0,a.kt)("td",{parentName:"tr",align:null},"\uac80\uc99d\uc744 \ud2b8\ub9ac\uac70\ud55c\ub2e4.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"verifyComplete()"),(0,a.kt)("td",{parentName:"tr",align:null},"\uac80\uc99d\uc744 \ud2b8\ub9ac\uac70\ud558\uace0, onComplete Signal\uc744 \uae30\ub300\ud55c\ub2e4.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"verifyError()"),(0,a.kt)("td",{parentName:"tr",align:null},"\uac80\uc99d\uc744 \ud2b8\ub9ac\uac70\ud558\uace0, onError Signal\uc744 \uae30\ub300\ud55c\ub2e4.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"verifyTimeout(Duration duration)"),(0,a.kt)("td",{parentName:"tr",align:null},"\uac80\uc99d\uc744 \ud2b8\ub9ac\uac70\ud558\uace0, \uc8fc\uc5b4\uc9c4 \uc2dc\uac04\uc774 \ucd08\uacfc\ub418\uc5b4\ub3c4 Publisher\uac00 \uc885\ub8cc\ub418\uc9c0 \uc54a\uc74c\uc744 \uae30\ub300\ud55c\ub2e4.")))),(0,a.kt)("h4",{id:"as\ub97c-\ud65c\uc6a9\ud55c-\uc2e4\ud328-message-logging"},"as\ub97c \ud65c\uc6a9\ud55c \uc2e4\ud328 message logging"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},'private static Flux<String> sayHello() {\n    return Flux.just("Hello", "Reactor");\n}\n\n@Test\npublic void sayHelloTest() {\n    StepVerifier\n            .create(sayHello())\n            .expectSubscription()\n            .as("# expect subscription")\n            .expectNext("Hi") // \uc2e4\ud328\n            .as("# expect Hi")\n            .expectNext("Reactor")\n            .as("# expect Reactor")\n            .verifyComplete();\n}\n\n// java.lang.AssertionError: expectation "# expect Hi" failed (expected value: Hi; actual value: Hello)\n')),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"as\ub97c \ud65c\uc6a9\ud574 expectXXXXX() \uba54\uc11c\ub4dc\uac00 \uc2e4\ud328\ud588\uc744 \ub54c\uc758 logging message\ub97c \uc124\uc815\ud560 \uc218 \uc788\ub2e4.")),(0,a.kt)("h4",{id:"\uc624\ub958-\ubc1c\uc0dd\uc744-\uae30\ub300\ud560-\ub54c-expecterror"},"\uc624\ub958 \ubc1c\uc0dd\uc744 \uae30\ub300\ud560 \ub54c expectError()"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"public static Flux<Integer> divideByTwo(Flux<Integer> source) {\n    return source.zipWith(Flux.just(2, 2, 2, 2, 0), (x, y) -> x/y);\n}\n\n@Test\npublic void divideByTwoTest() {\n    Flux<Integer> source = Flux.just(2, 4, 6, 8, 10);\n    StepVerifier\n            .create(divideByTwo(source))\n            .expectSubscription()\n            .expectNext(1)\n            .expectNext(2)\n            .expectNext(3)\n            .expectNext(4)\n            .expectError()\n            .verify();\n}\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"\ub9c8\uc9c0\ub9c9 \ud56d\ubaa9\uc5d0\uc11c 0\uc73c\ub85c \ub098\ub204\uae30\ub97c \uc218\ud589\uc5d0 \uc624\ub958\uac00 \ub098\uc624\uc9c0\ub9cc"),(0,a.kt)("li",{parentName:"ul"},"expectError()\ub294 \uc624\ub958\ub97c \uae30\ub300\ud558\uae30 \ub54c\ubb38\uc5d0 \ud14c\uc2a4\ud2b8\ub294 passed")),(0,a.kt)("h4",{id:"\uc624\ub958-\uc2e4\ud328-\uc2dc-\uc6d0\ud558\ub294-\uc2dc\ub098\ub9ac\uc624-\uba85\uc744-\ucd9c\ub825\ud558\uace0-\uc2f6\uc744-\ub584"},"\uc624\ub958 \uc2e4\ud328 \uc2dc \uc6d0\ud558\ub294 \uc2dc\ub098\ub9ac\uc624 \uba85\uc744 \ucd9c\ub825\ud558\uace0 \uc2f6\uc744 \ub584"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},'public static Flux<Integer> takeNumber(Flux<Integer> source, long n) {\n    return source.take(n);\n}\n\n@Test\npublic void test() {\n    Flux<Integer> source = Flux.range(0, 1000);\n    \n    StepVerifier.create(\n                    takeNumber(source, 500),\n                    StepVerifierOptions.create().scenarioName("Verify from 0 to 499") // \uc635\uc158 \uac12\uc73c\ub85c \uc2e4\ud328\ud560 \uacbd\uc6b0 \ucd9c\ub825\ud560 \uc2dc\ub098\ub9ac\uc624 \uba85\uc744 \ucd94\uac00\n            ).expectSubscription() // \uad6c\ub3c5 \ubc1c\uc0dd\uc744 \uae30\ub300\n            .expectNext(0)   // 0\uc774 emit\ub428\uc744 \uae30\ub300\n            .expectNextCount(498) // 498\uac1c\uc758 \uc22b\uc790\uac00 emit\ub428\uc744 \uae30\ub300\n            .expectNext(500) // 500\uc774 emit\ub428\uc744 \uae30\ub300\n            .expectComplete() // onComplete Signal\uc774 \uc804\uc1a1\ub428\uc744 \uae30\ub300\n            .verify();\n}\n\n// java.lang.AssertionError: [Verify from 0 to 499] expectation "expectNext(500)" failed (expected value: 500; actual value: 499)\n')),(0,a.kt)("h3",{id:"\uc2dc\uac04-\uae30\ubc18time-based-\ud14c\uc2a4\ud2b8"},"\uc2dc\uac04 \uae30\ubc18(Time-based) \ud14c\uc2a4\ud2b8"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Virtual Time\ub97c \ud65c\uc6a9\ud574 \ubbf8\ub798\uc5d0 \uc2e4\ud589\ub418\ub294 Reactor Sequence\uc758 \uc2dc\uac04\uc744 \uc55e\ub2f9\uaca8 \ud14c\uc2a4\ud2b8\ud560 \uc218 \uc788\ub2e4.")),(0,a.kt)("h4",{id:"\uc2dc\uac04\uc744-\uc55e\ub2f9\uaca8\uc11c-\ud14c\uc2a4\ud2b8\ud558\ub294-\uc608\uc2dc"},"\uc2dc\uac04\uc744 \uc55e\ub2f9\uaca8\uc11c \ud14c\uc2a4\ud2b8\ud558\ub294 \uc608\uc2dc"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},'private static Flux<Tuple2<String, Integer>> getCOVID19Count(Flux<Long> source) {\n    return source.flatMap(\n            notUse -> Flux.just(\n                    Tuples.of("\uc11c\uc6b8", 10),\n                    Tuples.of("\uacbd\uae30", 20),\n                    Tuples.of("\ubd80\uc0b0", 30),\n                    Tuples.of("\ub300\uad6c", 40),\n                    Tuples.of("\uc81c\uc8fc", 50)\n            )\n    );\n}\n\n@Test\npublic void getCOVID19CountTest() {\n    StepVerifier\n            .withVirtualTime(\n                    () -> getCOVID19Count(Flux.interval(Duration.ofHours(1)).take(1)) // 1\uc2dc\uac04 \ub4a4\uc5d0 \ub370\uc774\ud130\ub97c emit\n            ).expectSubscription()\n            .then(() -> VirtualTimeScheduler.get().advanceTimeBy(Duration.ofHours(1))) // \uc2dc\uac04\uc744 1\uc2dc\uac04 \uc55e\ub2f9\uae30\ub294 \uba54\uc11c\ub4dc\n            .expectNextCount(5)\n            .expectComplete()\n            .verify();\n}\n')),(0,a.kt)("h4",{id:"verify-timeout\uc744-\ub450\ub294-\uc608\uc2dc"},"verify Timeout\uc744 \ub450\ub294 \uc608\uc2dc"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"@Test\npublic void getCOVID19CountTest() {\n    StepVerifier\n            .withVirtualTime(\n                    () -> getCOVID19Count(Flux.interval(Duration.ofHours(1)).take(1)) // 1\uc2dc\uac04 \ub4a4\uc5d0 \ub370\uc774\ud130\ub97c emit\n            ).expectSubscription()\n            .expectNextCount(5)\n            .expectComplete()\n            .verify(Duration.ofSeconds(3));\n}\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"verify\uc5d0 \uc9c0\uc815\ud55c 3\ucd08\ub77c\ub294 \uc2dc\uac04 \uc548\uc5d0 \uae30\ub300\uac12\uc5d0 \ub300\ud55c \ud3c9\uac00\ub97c \ub9c8\uccd0\uc57c \ud14c\uc2a4\ud2b8\uac00 pass\ud55c\ub2e4.")),(0,a.kt)("h4",{id:"expectnoevent\ub97c-\ud65c\uc6a9\ud55c-\uc2dc\uac04-\uc55e\ub2f9\uae40"},"expectNoEvent()\ub97c \ud65c\uc6a9\ud55c \uc2dc\uac04 \uc55e\ub2f9\uae40"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"@Test\npublic void getCOVID19CountTest2() {\n    StepVerifier\n            .withVirtualTime(\n                    () -> getVoteCount(Flux.interval(Duration.ofSeconds(1)))\n            ).expectSubscription()\n            .expectNoEvent(Duration.ofSeconds(1))\n            .expectNoEvent(Duration.ofSeconds(1))\n            .expectNoEvent(Duration.ofSeconds(1))\n            .expectNoEvent(Duration.ofSeconds(1))\n            .expectNoEvent(Duration.ofSeconds(1))\n            .expectNextCount(5)\n            .expectComplete()\n            .verify();\n}\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"expectNoEvent()\ub294 \ud30c\ub77c\ubbf8\ud130\ub85c \uc9c0\uc815\ud55c \uc2dc\uac04 \ub3d9\uc548 \uc5b4\ub5a4 Signal\ub3c4 \ubc1c\uc0dd\ud558\uc9c0 \uc54a\uc558\uc74c\uc744 \uae30\ub300\ud55c\ub2e4."),(0,a.kt)("li",{parentName:"ul"},"\ub610\ud55c \uc9c0\uc815\ud55c \uc2dc\uac04\ub9cc\ud07c \uc2dc\uac04\uc744 \uc55e\ub2f9\uae30\ub294 \uc5ed\ud560\ub3c4 \ud55c\ub2e4.")),(0,a.kt)("h3",{id:"backpressure-\ud14c\uc2a4\ud2b8"},"Backpressure \ud14c\uc2a4\ud2b8"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"private static Flux<Integer> generateNumber() {\n    return Flux.create(emitter -> {\n        for(int i = 1; i <= 100; i++) {\n            emitter.next(i);\n        }\n        emitter.complete();\n    }, FluxSink.OverflowStrategy.ERROR); // Backpressure \uc804\ub7b5\uc73c\ub85c ERROR \uc0ac\uc6a9\n}\n\n@Test\npublic void backpressureTest() {\n    StepVerifier\n            .create(generateNumber(), 1) // 2\ubc88\uc9f8 \ud30c\ub77c\ubbf8\ud130: \ub370\uc774\ud130 \uc694\uccad \uac1c\uc218\n            .thenConsumeWhile(num -> num >= 1)\n            .expectError() // \uc5d0\ub7ec\uac00 \ud130\uc9c0\ub294 \uacb0\uacfc \uae30\ub300\n            .verifyThenAssertThat() // \uac80\uc99d\uc744 Trigger\ud55c \ub4a4\n            .hasDroppedElements(); // \uc694\uc18c\ub97c \ubc84\ub9ac\uae30\ub97c \uae30\ub300\ud55c\ub2e4\n}\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"\ub370\uc774\ud130\ub97c 1\uac1c\ub9cc \uc694\uccad\ud588\ub294\ub370 100\uac1c\ub97c emit\ud558\uae30 \ub54c\ubb38\uc5d0 OverflowException\uc774 \ubc1c\uc0dd\ud55c\ub2e4."),(0,a.kt)("li",{parentName:"ul"},"\ub54c\ubb38\uc5d0 expectError()\uc758 \uae30\ub300\uac12\uc744 \ucda9\uc871\uc2dc\ud0a8\ub2e4."),(0,a.kt)("li",{parentName:"ul"},"\uc774\ud6c4 \ubc84\ub824\uc9c0\ub294 \uc694\uc18c\ub97c \ud655\uc778\ud558\uae30 \uc704\ud574 hasDroppedElements() \ud65c\uc6a9\ud55c\ub2e4.")),(0,a.kt)("h3",{id:"context-\ud14c\uc2a4\ud2b8"},"Context \ud14c\uc2a4\ud2b8"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},'private static Mono<String> getSecretMessage(Mono<String> keySource) {\n    return keySource\n            .transformDeferredContextual(\n                    (mono, ctx) -> mono.map(notUse -> ctx.get("secretMessage"))\n            );\n}\n\n@Test\npublic void getSecretMessageTest() {\n    Mono<String> source = Mono.just("hello");\n\n    StepVerifier\n            .create(\n                    getSecretMessage(source)\n                            .contextWrite(context -> context.put("secretMessage", "Hello, Reactor"))\n            ).expectSubscription()\n            .expectAccessibleContext()\n            .hasKey("secretMessage")\n            .then()\n            .expectNext("Hello, Reactor")\n            .expectComplete()\n            .verify();\n}\n')),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"expectAccessibleContext()\ub294 \uad6c\ub3c5 \uc774\ud6c4\uc5d0 Context\uac00 \uc804\ud30c\ub418\uc5c8\uc74c\uc744 \uae30\ub300\ud55c\ub2e4."),(0,a.kt)("li",{parentName:"ul"},"hasKey()\ub294 Context \ub0b4\uc5d0 \uc6d0\ud558\ub294 key\uac12\uc774 \uc874\uc7ac\ud558\ub294\uc9c0\ub97c \ud310\ub2e8\ud55c\ub2e4.")),(0,a.kt)("h3",{id:"record-\uae30\ubc18-\ud14c\uc2a4\ud2b8"},"Record \uae30\ubc18 \ud14c\uc2a4\ud2b8"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"emit\ub41c \ub370\uc774\ud130\ub97c \ub2e8\uc21c \uae30\ub313\uac12 \ud3c9\uac00\ub9cc\uc774 \uc544\ub2cc \uad6c\uccb4\uc801\uc778 \uc870\uac74\uc73c\ub85c Assertion\ud574\uc57c \ud558\ub294 \uacbd\uc6b0\uc5d0 \uc0ac\uc6a9\ud55c\ub2e4."),(0,a.kt)("li",{parentName:"ul"},"recordWith()\ub294 \ud30c\ub77c\ubbf8\ud130\ub85c \uc804\ub2ec\ud55c Java\uc758 \uceec\ub809\uc158\uc5d0 emit\ub41c \ub370\uc774\ud130\ub4e4\uc744 \ucd94\uac00\ud55c\ub2e4.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},'private static Flux<String> getCapitalizedCountry(Flux<String> source) {\n    return source\n            .map(country -> country.substring(0, 1).toUpperCase() + country.substring(1));\n}\n\n@Test\npublic void getCountryTest() {\n    StepVerifier\n            .create(getCapitalizedCountry(\n                    Flux.just("korea", "england", "canada", "india")\n            )).expectSubscription()\n            .recordWith(ArrayList::new) // \ud30c\ub77c\ubbf8\ud130\ub85c \uc804\ub2ec\ud55c Java Collection\uc5d0 emit\ub41c \ub370\uc774\ud130\ub97c \ucd94\uac00\n            .thenConsumeWhile(country -> !country.isEmpty()) // \uc870\uac74 \uc77c\uce58 \ub370\uc774\ud130\ub9cc \ub2e4\uc74c \ub2e8\uacc4\uc5d0\uc11c \uc18c\ube44 \uac00\ub2a5\n            .consumeRecordedWith( // Collection\uc5d0 \uae30\ub85d\ub41c \ub370\uc774\ud130\ub97c \uc18c\ube44\ud55c\ub2e4.\n                    countries -> {\n                        assertTrue(countries.stream().allMatch(country -> Character.isUpperCase(country.charAt(0))));\n                    }\n            ).expectComplete()\n            .verify();\n}\n\n@Test\npublic void getCountryTest2() {\n    StepVerifier.create(getCapitalizedCountry(\n            Flux.just("korea", "england", "canada", "india")\n    )).expectSubscription()\n      .recordWith(ArrayList::new)\n      .thenConsumeWhile(country -> !country.isEmpty())\n      .expectRecordedMatches(countries -> countries.stream().allMatch(country -> Character.isUpperCase(country.charAt(0))))\n      .expectComplete()\n      .verify();\n}\n')),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"1\ubc88 \ud14c\uc2a4\ud2b8 consumeRecordedWith() + assertXXXX() \uc870\ud569"),(0,a.kt)("li",{parentName:"ul"},"2\ubc88 \ud14c\uc2a4\ud2b8 expectRecordedMatches() + Predicate \uc870\ud569")),(0,a.kt)("h2",{id:"2-testpublisher\ub97c-\uc0ac\uc6a9\ud55c-\ud14c\uc2a4\ud305"},"2. TestPublisher\ub97c \uc0ac\uc6a9\ud55c \ud14c\uc2a4\ud305"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"reactor-test\uac00 \uc9c0\uc6d0\ud558\ub294 \ud14c\uc2a4\ud2b8 \uc804\uc6a9 Publisher\uc774\ub2e4."),(0,a.kt)("li",{parentName:"ul"},"\uc544\ub798\uc640 \uac19\uc740 Signal \uc720\ud615\uc744 \ubc1c\uc0dd\uc2dc\ud0a8\ub2e4.",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"next(T) \ub610\ub294 next(T, T, ...): 1\uac1c \uc774\uc0c1\uc758 onNext Signal"),(0,a.kt)("li",{parentName:"ul"},"emit(T ...): 1\uac1c \uc774\uc0c1\uc758 onNext Signal\uc744 \ubc1c\uc0dd\uc2dc\ud0a8 \ud6c4, onComplete Signal\uc744 \ubc1c\uc0dd\uc2dc\ud0a8\ub2e4."),(0,a.kt)("li",{parentName:"ul"},"complete(): onComplete Signal\uc744 \ubc1c\uc0dd\uc2dc\ud0a8\ub2e4."),(0,a.kt)("li",{parentName:"ul"},"error(Throwable): onError Signal\uc744 \ubc1c\uc0dd\uc2dc\ud0a8\ub2e4.")))),(0,a.kt)("h3",{id:"\uc815\uc0c1-\ub3d9\uc791\ud558\ub294well-behaved-testpublisher"},"\uc815\uc0c1 \ub3d9\uc791\ud558\ub294(Well-behaved) TestPublisher"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"// \ud14c\uc2a4\ud2b8 \ub300\uc0c1\uc774 \ub418\ub294 \uba54\uc11c\ub4dc\nprivate static Flux<Integer> divideByTwo(Flux<Integer> source) {\n    return source.map(data -> data/2);\n}\n\n\n@Test\npublic void divideByTwoTest() {\n    TestPublisher<Integer> source = TestPublisher.create(); // TestPublisher \uc0dd\uc131\n\n    StepVerifier\n            .create(divideByTwo(source.flux())) // Flux\ub85c \ub3d9\uc791\ud558\ub3c4\ub85d\n            .expectSubscription()\n            .then(() -> source.emit(2, 4, 6, 8, 10)) // emit\ud560 \ub370\uc774\ud130 \uc815\uc758\n            .expectNext(1, 2, 3, 4, 5)\n            .expectComplete()\n            .verify();\n}\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"\ud504\ub85c\uadf8\ub798\ubc0d \ubc29\uc2dd\uc73c\ub85c Signal\uc744 \ubc1c\uc0dd\uc2dc\ud0a4\uba70 \uc6d0\ud558\ub294 \uc0c1\ud669\uc744 \ubbf8\uc138\ud558\uac8c \uc7ac\uc5f0\uc774 \uac00\ub2a5\ud558\ub2e4."),(0,a.kt)("li",{parentName:"ul"},"\uc704 \ud14c\uc2a4\ud2b8\uc5d0\uc11c\ub294 \ud070 \uc758\ubbf8\uac00 \uc5c6\uc5b4\ubcf4\uc77c \uc218 \uc788\uc9c0\ub9cc \ud14c\uc2a4\ud2b8 \uc0c1\ud669\uc774 \ubcf5\uc7a1\ud560 \ub54c \uc870\uac74\uc744 \ubbf8\uc138\ud558\uac8c \uc218\uc815\ud558\uba70 \uc791\uc5c5\ud558\uae30 \ud3b8\ub9ac\ud558\ub2e4.")),(0,a.kt)("h3",{id:"\uc624\ub3d9\uc791\ud558\ub294misbehaving-testpublisher"},"\uc624\ub3d9\uc791\ud558\ub294(Misbehaving) TestPublisher"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"\uc624\ub3d9\uc791\ud558\ub294 TestPublisher\ub97c \ub9cc\ub4e4\uc5b4 Reactive Streams\uc758 \uc0ac\uc591\uc744 \uc704\ubc18\ud558\ub294\uc9c0 \ud14c\uc2a4\ud2b8\uac00 \uac00\ub2a5\ud558\ub2e4."),(0,a.kt)("li",{parentName:"ul"},"\uc624\ub3d9\uc791\ud558\ub294 Publisher\ub780 \ub9ac\uc561\ud2f0\ube0c \uc2a4\ud2b8\ub9bc\uc988 \uc0ac\uc591 \uc704\ubc18 \uc5ec\ubd80\ub97c \uc0ac\uc804\uc5d0 \uccb4\ud06c\ud558\uc9c0 \uc54a\ub294\ub2e4\ub294 \ub73b."),(0,a.kt)("li",{parentName:"ul"},"\uc989, \uc0ac\uc591\uc744 \uc704\ubc18\ud574\ub3c4 \ub370\uc774\ud130\ub97c emit\ud560 \uc218 \uc788\ub2e4.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"@Test\npublic void divideByTwoTest2() {\n    TestPublisher<Integer> source = TestPublisher.createNoncompliant(TestPublisher.Violation.ALLOW_NULL); // \ub370\uc774\ud130\uac00 null\uc774\ub77c\ub3c4 \uc815\uc0c1 \ub3d9\uc791\ud558\ub294 TestPublisher\n    // TestPublisher<Integer> source = TestPublisher.create(); \uc815\uc0c1 \ub3d9\uc791 Publisher\ub97c \uc0ac\uc6a9\ud558\uba74 emit \uacfc\uc815\uc5d0\uc11c NullPointerException\uc774 \ub098\uc628\ub2e4\n\n    var dataSource = Arrays.asList(2, 4, 6, 8, null);\n\n    StepVerifier\n            .create(divideByTwo(source.flux()))\n            .expectSubscription()\n            .then(() -> {\n                dataSource.stream()\n                        .forEach(data -> source.next(data));\n                source.complete();\n            })\n            .expectNext(1, 2, 3, 4)\n            .expectError()\n            .verify();\n}\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Well-behaved TestPublisher\ub97c \uc0ac\uc6a9\ud560 \ub54c\uc640 Misbehaving TestPublisher\ub97c \uc0ac\uc6a9\ud560 \ub54c NullPointerException\uc774 \ubc1c\uc0dd\ud558\ub294 \uc2dc\uc810\uc774 \ub2ec\ub77c\uc9c4\ub2e4."),(0,a.kt)("li",{parentName:"ul"},"\ucd94\uac00\uc801\uc778 \uc704\ubc18 \uc870\uac74",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"ALLOW_NULL: \ub370\uc774\ud130\uac00 null\uc774\uc5b4\ub3c4 emit"),(0,a.kt)("li",{parentName:"ul"},"CLEANUP_ON_TERMINATE: Terminal Signal(onComplete, onError, emit)\uc744 \uc5f0\ub2ec\uc544 \uc5ec\ub7ec \ubc88 \ubcf4\ub0bc \uc218 \uc788\ub3c4\ub85d \ud55c\ub2e4."),(0,a.kt)("li",{parentName:"ul"},"REQUEST_OVERFLOW: \uc694\uccad \uac1c\uc218\ubcf4\ub2e4 \ub354 \ub9ce\uc740 Signal\uc77c \ubc1c\uc0dd\ud574\ub3c4 IllegalStateException\uc774 \ubc1c\uc0dd\ud558\uc9c0 \uc54a\uace0 \ub2e4\uc74c \ud638\ucd9c \uc9c4\ud589")))),(0,a.kt)("h2",{id:"3-publisherprobe\ub97c-\uc0ac\uc6a9\ud55c-\ud14c\uc2a4\ud305"},"3. PublisherProbe\ub97c \uc0ac\uc6a9\ud55c \ud14c\uc2a4\ud305"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Sequence\uc758 \uc2e4\ud589 \uacbd\ub85c\ub97c \ud14c\uc2a4\ud2b8\ud560 \uc218 \uc788\ub2e4."),(0,a.kt)("li",{parentName:"ul"},"\uc8fc\ub85c \uc870\uac74\uc5d0 \ub530\ub77c Sequence\uac00 \ubd84\uae30\ub418\ub294 \uacbd\uc6b0, Sequence\uc758 \uc2e4\ud589 \uacbd\ub85c\ub97c \ucd94\uc801\ud574 \uc815\uc0c1 \ub3d9\uc791\ud588\ub294\uc9c0 \ud14c\uc2a4\ud2b8\uac00 \uac00\ub2a5\ud558\ub2e4.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},'// \ud14c\uc2a4\ud2b8 \ub300\uc0c1 \uba54\uc11c\ub4dc \nprivate static Mono<String> processTask(Mono<String> main, Mono<String> stanby) {\n    return main.flatMap(message -> Mono.just(message)).switchIfEmpty(stanby);\n}\n\nprivate static Mono<String> supplyMainPower() {\n    return Mono.empty();\n}\n\nprivate static Mono sulpplyStandbyPower() {\n    return Mono.just("# supply Stanby Power");\n}\n\n@Test\npublic void publisherProbeTest() {\n    PublisherProbe<String> probe =\n            PublisherProbe.of(sulpplyStandbyPower()); // \ud14c\uc2a4\ud2b8 \ub300\uc0c1 Publisher\ub97c PublisherProbe.of()\ub85c \ub798\ud551\n\n    StepVerifier\n            .create(processTask(supplyMainPower(), probe.mono()))\n            .expectNextCount(1)\n            .verifyComplete();\n\n    probe.assertWasSubscribed(); // sulpplyStandbyPower()\uac00 \uad6c\ub3c5\ub418\uc5c8\ub294\uac00?\n    probe.assertWasRequested(); // sulpplyStandbyPower() \uc694\uccad\uc744 \ud588\ub294\uac00?\n    probe.assertWasNotCancelled(); // sulpplyStandbyPower() \uc911\uac04\uc5d0 \ucde8\uc18c\ub294 \uc5c6\uc5c8\ub294\uac00?\n}\n')),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"PublisherProbe.of() \uba54\uc11c\ub4dc\ub85c \ud14c\uc2a4\ud2b8 \ub300\uc0c1 Publisher\ub97c \ub798\ud551\ud55c\ub2e4."),(0,a.kt)("li",{parentName:"ul"},"\uc774\ud6c4 mono\ub098 flux\ub85c \uc0ac\uc6a9\uc774 \uac00\ub2a5\ud558\ub2e4."),(0,a.kt)("li",{parentName:"ul"},"\uc774\ud6c4 assertWas~ / assertWasNot~ \uba54\uc11c\ub4dc\ub97c \ud1b5\ud574 \ub300\uc0c1 Publisher\uac00 \uc6d0\ud558\ub294 \ubc29\uc2dd\uc73c\ub85c \ub3d9\uc791\ud588\ub294\uc9c0 \ud655\uc778\uc774 \uac00\ub2a5\ud558\ub2e4."),(0,a.kt)("li",{parentName:"ul"},"\uc704 \ud14c\uc2a4\ud2b8\ub294 \uacb0\ub860\uc801\uc73c\ub85c processTask()\uc758 2\ubc88\uc9f8 \uc778\uc790\ub85c PublisherProbe\uac00 \uc0ac\uc6a9\ub418\uc5b4 switchIfEmpty() \uba54\uc11c\ub4dc\uac00 \ub3d9\uc791\ud588\ub294\uc9c0\ub97c \ud655\uc778\ud560 \uc218 \uc788\ub2e4.")))}m.isMDXComponent=!0}}]);