<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>권우석 Blog</title>
        <link>https://egg528.github.io</link>
        <description>권우석 Blog</description>
        <lastBuildDate>Wed, 04 Dec 2024 00:00:00 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>ko</language>
        <item>
            <title><![CDATA[JDBC, DataSource 그리고 HikariCP]]></title>
            <link>https://egg528.github.io/jdbc-datasource-hikaricp</link>
            <guid>https://egg528.github.io/jdbc-datasource-hikaricp</guid>
            <pubDate>Wed, 04 Dec 2024 00:00:00 GMT</pubDate>
            <description><![CDATA[Java의 기본적인 DB 접근 기술들]]></description>
            <content:encoded><![CDATA[<p>Java의 기본적인 DB 접근 기술들
JDBC, DataSource 그리고 HikariCP</p>
<h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="개요">개요<a href="https://egg528.github.io/jdbc-datasource-hikaricp#%EA%B0%9C%EC%9A%94" class="hash-link" aria-label="개요에 대한 직접 링크" title="개요에 대한 직접 링크">​</a></h2>
<hr>
<ol>
<li>JDBC API</li>
<li>DataSource</li>
<li>HikariCP</li>
</ol>
<br>
<h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="jdbc-java-database-connectivity">JDBC (Java Database Connectivity)<a href="https://egg528.github.io/jdbc-datasource-hikaricp#jdbc-java-database-connectivity" class="hash-link" aria-label="JDBC (Java Database Connectivity)에 대한 직접 링크" title="JDBC (Java Database Connectivity)에 대한 직접 링크">​</a></h2>
<hr>
<p><img decoding="async" loading="lazy" alt="jdbc.jpg" src="https://egg528.github.io/assets/images/jdbc-368de0bc4138cba5970c42a724e5fafd.jpg" width="996" height="776" class="img_ev3q">
JDBC는 Java Application과 DB 사이에 연결을 위한 표준 API이다. JDBC를 통해 개발자는 DB의 구체적인 종류와 관계 없이 일관된 접근 방식으로 DB에 접근할 수 있다.
위 그림을 보면 알 수 있듯이 JDBC를 사용하기 위해서는 JDBC 구현체인 JDBC Driver가 필요하고 개발자는 Driver의 사용법은 알 필요 없이 JDBC를 사용해 DB에 접근하게 된다.</p>
<br>
<h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="1-drivermanager">(1) DriverManager<a href="https://egg528.github.io/jdbc-datasource-hikaricp#1-drivermanager" class="hash-link" aria-label="(1) DriverManager에 대한 직접 링크" title="(1) DriverManager에 대한 직접 링크">​</a></h3>
<div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">private</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">static</span><span class="token plain"> </span><span class="token class-name">Connection</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">getConnection</span><span class="token punctuation" style="color:#393A34">(</span><span class="token class-name">String</span><span class="token plain"> url</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token class-name namespace" style="opacity:0.7">java</span><span class="token class-name namespace punctuation" style="opacity:0.7;color:#393A34">.</span><span class="token class-name namespace" style="opacity:0.7">util</span><span class="token class-name namespace punctuation" style="opacity:0.7;color:#393A34">.</span><span class="token class-name">Properties</span><span class="token plain"> info</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token class-name">Class</span><span class="token generics punctuation" style="color:#393A34">&lt;</span><span class="token generics operator" style="color:#393A34">?</span><span class="token generics punctuation" style="color:#393A34">&gt;</span><span class="token plain"> caller</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">throws</span><span class="token plain"> </span><span class="token class-name">SQLException</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain"> 생략</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token class-name">DriverInfo</span><span class="token plain"> aDriver </span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> registeredDrivers</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">// If the caller does not have permission to load the driver then</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">// skip it.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token function" style="color:#d73a49">isDriverAllowed</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">aDriver</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">driver</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> callerCL</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token keyword" style="color:#00009f">try</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                </span><span class="token function" style="color:#d73a49">println</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"    trying "</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">+</span><span class="token plain"> aDriver</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">driver</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">getClass</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">getName</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                </span><span class="token class-name">Connection</span><span class="token plain"> con </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> aDriver</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">driver</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">connect</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">url</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> info</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">con </span><span class="token operator" style="color:#393A34">!=</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">null</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                    </span><span class="token comment" style="color:#999988;font-style:italic">// Success!</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                    </span><span class="token function" style="color:#d73a49">println</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"getConnection returning "</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">+</span><span class="token plain"> aDriver</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">driver</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">getClass</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">getName</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                    </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">con</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">catch</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token class-name">SQLException</span><span class="token plain"> ex</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">reason </span><span class="token operator" style="color:#393A34">==</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">null</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                    reason </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> ex</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">else</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token function" style="color:#d73a49">println</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"    skipping: "</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">+</span><span class="token plain"> aDriver</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">driver</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">getClass</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">getName</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain"> 생략</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>DriverManager는 JDBC Driver들을 관리할 수 있는 객체이고 DriverManager를 통해 DB Connection을 얻을 수 있다.
위 메서드는 DriverManager 객체 내의 private static getConnection(...) 메서드로 public static getConnection(...)가 최종적으로 호출하게 되는 메서드이다.
로직을 살펴보면 등록된 Driver들을 순회하며 connection을 맺어보고 가장 먼저 맺어진 Connection을 반환한다. (여러 Driver가 등록된 경우)</p>
<br>
<div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">public</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">static</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">void</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">main</span><span class="token punctuation" style="color:#393A34">(</span><span class="token class-name">String</span><span class="token punctuation" style="color:#393A34">[</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> args</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">throws</span><span class="token plain"> </span><span class="token class-name">SQLException</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token class-name">String</span><span class="token plain"> url </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"jdbc:mysql://localhost:3306/study_db"</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token class-name">String</span><span class="token plain"> user </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"root"</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token class-name">String</span><span class="token plain"> password </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"1234"</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">try</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token class-name">Connection</span><span class="token plain"> connection </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token class-name">DriverManager</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">getConnection</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">url</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> user</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> password</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">// 정적 SQL 실행을 위한 객체</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token class-name">Statement</span><span class="token plain"> statement </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> connection</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">createStatement</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">// 질의 결과 테이블 객체</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">// 실제 DB 질의도 ResultSet 객체가 하게 된다. (단순히 질의 결과를 가지는 객체가 아님)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token class-name">ResultSet</span><span class="token plain"> rs </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> statement</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">executeQuery</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"SELECT * FROM users"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">while</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">rs</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">next</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token class-name">System</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">out</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">println</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">rs</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">getString</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"name"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>앞서 살펴봤듯이 DriverManager는 url, user, password값으로 DB Connection을 맺어주는 기능을 제공한다.
하지만 위 코드를 보면 알 수 있듯이 DriverManager는 DB 연결을 Util 클래스에 가깝다.
또한 매번 DB 접근을 위해 Connection을 맺고 끊어줘야 한다는 것도 DB 접근이 빈번한 Application 입장에서는 큰 낭비일 것이다.
실제로 DriverManager.getConnection(url, user, password) 수행속도를 확인해보니 부분의 10회 평균이 0.25초였다.
API 요청에서 DB 접근을 위한 Connection 생성에 0.25초를 소비한다면 그 API의 성능은.. 더 말하지 않아도 될 것 같다.</p>
<br>
<h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="2-datasource">(2) DataSource<a href="https://egg528.github.io/jdbc-datasource-hikaricp#2-datasource" class="hash-link" aria-label="(2) DataSource에 대한 직접 링크" title="(2) DataSource에 대한 직접 링크">​</a></h3>
<div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">public</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">interface</span><span class="token plain"> </span><span class="token class-name">DataSource</span><span class="token plain">  </span><span class="token keyword" style="color:#00009f">extends</span><span class="token plain"> </span><span class="token class-name">CommonDataSource</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token class-name">Wrapper</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token class-name">Connection</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">getConnection</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">throws</span><span class="token plain"> </span><span class="token class-name">SQLException</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token class-name">Connection</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">getConnection</span><span class="token punctuation" style="color:#393A34">(</span><span class="token class-name">String</span><span class="token plain"> username</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token class-name">String</span><span class="token plain"> password</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">throws</span><span class="token plain"> </span><span class="token class-name">SQLException</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain"> 생략</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>주석으로 DataSource 설명을 대신하자면 Datasource는 DB Connection을 생성하는 팩토리이다.
DriverManager의 대안으로 탄생했고 DB Connection을 획득하기 위한 메서드들이 정의되어 있다.
JDBC에서는 따로 구현체를 제공하지는 않는다. 때문에 개발자는 DataSource의 여러 구현체 중 원하는 걸 사용해 DB 접근 방식을 선택할 수 있다.</p>
<br>
<h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="hikaricp">HikariCP<a href="https://egg528.github.io/jdbc-datasource-hikaricp#hikaricp" class="hash-link" aria-label="HikariCP에 대한 직접 링크" title="HikariCP에 대한 직접 링크">​</a></h2>
<hr>
<div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">Spring Boot uses the following algorithm for choosing a specific implementation:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">1. We prefer HikariCP for its performance and concurrency. If HikariCP is available, we always choose it.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">2. Otherwise, if the Tomcat pooling DataSource is available, we use it.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">3. Otherwise, if Commons DBCP2 is available, we use it.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">4. If none of HikariCP, Tomcat, and DBCP2 are available and if Oracle UCP is available, we use it.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">(https://docs.spring.io/spring-boot/docs/current/reference/html/data.html#data.sql.datasource)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>HikariCP는 고성능 JDBC Connection Pool이자 Java 진영에서 DB Connection Pool을 사용할 때 가장 먼저 고려되는 library이다.
위 글은 spring boot 공식 문서인데 Default DataSource로 사용하는 것이 HikariCP이다. 1번 글만 읽어봐도 HikariCP를 얼마나 신뢰하는 지를 알 수 있다.</p>
<br>
<div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">public</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">static</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">void</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">main</span><span class="token punctuation" style="color:#393A34">(</span><span class="token class-name">String</span><span class="token punctuation" style="color:#393A34">[</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> args</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">throws</span><span class="token plain"> </span><span class="token class-name">SQLException</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token class-name">HikariConfig</span><span class="token plain"> config </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">new</span><span class="token plain"> </span><span class="token class-name">HikariConfig</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    config</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">setJdbcUrl</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"jdbc:mysql://localhost:3306/study_db"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    config</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">setUsername</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"root"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    config</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">setPassword</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"1234"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">try</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token class-name">HikariDataSource</span><span class="token plain"> ds </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">new</span><span class="token plain"> </span><span class="token class-name">HikariDataSource</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">config</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token class-name">Connection</span><span class="token plain"> connection </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> ds</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">getConnection</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">// 정적 SQL 실행을 위한 객체</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token class-name">Statement</span><span class="token plain"> statement </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> connection</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">createStatement</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">// 질의 결과 테이블 객체</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">// 실제 DB 질의도 ResultSet 객체가 하게 된다. (단순히 질의 결과를 가지는 객체가 아님)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token class-name">ResultSet</span><span class="token plain"> rs </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> statement</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">executeQuery</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"SELECT * FROM users"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">while</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">rs</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">next</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token class-name">System</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">out</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">println</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">rs</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">getString</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"name"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>먼저 HikariCP 사용 코드부터 살펴보자. 이름에서도 알 수 있듯이 HikariCP는 DataSource 구현체인 HikariDataSource를 제공한다.
HikariDataSource는 DataSource의 구현체이지만 추가적으로 Closeable 인터페이스를 구현하고 있기도 하다. 때문에 위 코드처럼 try with resource 구문과 함께 사용할 수 있다.
HikariCP는 스스로를 빠르다고 소개하는데 정말 빠른 걸까? 10번을 실행해봤을 때 Connection connection = ds.getConnection()의 수행 시간은 평균 1 MilliSecond이다.
이는 DriverManager를 사용했을 때보다 250배 빨라진 수치이다. 어떻게 HikariCP는 DriverManager에 비해 250배 빠른 성능을 낼 수 있는 것일까?</p>
<br>
<h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="1-pooling-기법">(1) Pooling 기법<a href="https://egg528.github.io/jdbc-datasource-hikaricp#1-pooling-%EA%B8%B0%EB%B2%95" class="hash-link" aria-label="(1) Pooling 기법에 대한 직접 링크" title="(1) Pooling 기법에 대한 직접 링크">​</a></h3>
<p>HikariCP의 CP는 Connection Pool의 약어이다. 말 그대로 Connection을 미리 생성해두고 Pool에 보관한 후 필요할 때 꺼내서 쓰는 방식이다.
이러한 방식은 DriverManger를 활용해 필요시에 DB와 Connection을 생성하고 사용 후 Connection을 닫는 방식에 비해 성능과 자원 사용 측면에서 모두 효율적이다.</p>
<br>
<h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="2-delegates-최적화">(2) Delegates 최적화<a href="https://egg528.github.io/jdbc-datasource-hikaricp#2-delegates-%EC%B5%9C%EC%A0%81%ED%99%94" class="hash-link" aria-label="(2) Delegates 최적화에 대한 직접 링크" title="(2) Delegates 최적화에 대한 직접 링크">​</a></h3>
<p>대다수의 사람들이 HikariCP가 고성능인 이유는 Pooling 기법에 있다고 생각할 것이고 이는 틀린 말은 아니다.
하지만 다른 Connection Pool 기반의 DataSource와 비교했을 때에도 HikariCP가 뛰어나다는 건 다른 이유들도 분명 있다는 뜻일 것이다.
<a href="https://github.com/brettwooldridge/HikariCP/wiki/Down-the-Rabbit-Hole" target="_blank" rel="noopener noreferrer">Down the Rabbit Hole</a> 글에서는 HikariCP가 어떻게 고성능을 달성했는지 설명해주며
Connection, Statement 등을 감싼 Delegates의 최적화가 큰 역할을 한다고 말한다. 간단한 예시로 ConnectionProxy는 ArrayList&lt;Statement&gt; 객체를 가지고 있는데 Statement를 생성하고 ArrayList에 담은 후 사용 후에는 제거를 해주게 된다.
이때 remove() 메서드는 Head to tail 순서로 원소를 찾는다. 하지만 대개 사용 직후 Statement가 제가된다는 것을 remove()를 Tail to head 순서로 구현한 FastList 자료 구조를 만들어 사용한다고 한다.
이러한 최적화는 큰 성능 개선은 아니라 말하지만 이정도 수준을 시작으로 JIT 컴파일러를 잘 활용할 수 있도록 바이트코드 수준의 엔지니어링까지 적용되어 고성능을 달성했다고 설명해준다.</p>
<br>
<h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="정리">정리<a href="https://egg528.github.io/jdbc-datasource-hikaricp#%EC%A0%95%EB%A6%AC" class="hash-link" aria-label="정리에 대한 직접 링크" title="정리에 대한 직접 링크">​</a></h2>
<hr>
<p>Spring Data JPA나 Spring Data JDBC처럼 개발자가 편하게 사용할 수 있는 라이브러리로 개발을 하다 보니 DB Connection과 그 주변부에 대해 생각하지 않고 개발을 해왔다는 생각이 든다.
게다가 회사 운영에서 DB Connection과 관련한 문제 상황을 겪어보지 못해 더 신경을 못썼던 것 같다.
하지만 JDBC, DataSource, HikariCP라는 DB 접근의 기반 기술을 알아보고 나니 개발했던 API들의 동작을 좀 더 세밀하게 알게된 것 같아 좋았고, 무엇보다 문제가 생겼을 떄 해결 과정에서 큰 힘이되지 않을까 싶다.</p>]]></content:encoded>
            <category>java</category>
            <category>db</category>
        </item>
        <item>
            <title><![CDATA[세상 끝의 카페]]></title>
            <link>https://egg528.github.io/the-cafe-on-the-edge-of-the-world</link>
            <guid>https://egg528.github.io/the-cafe-on-the-edge-of-the-world</guid>
            <pubDate>Mon, 04 Dec 2023 00:00:00 GMT</pubDate>
            <description><![CDATA[세상 끝의 카페 독후감]]></description>
            <content:encoded><![CDATA[<p>디프만 팀장 홍석이에게 크리스마스 책 선물을 받았다.<br>
<!-- -->홍석이가 전에 읽었던 책인데 내가 읽어도 좋을 것 같아서 선물을 했다고 한다.<br>
<!-- -->디프만을 신청하길 참 잘했다 생각한 데에는 여러 이유가 있지만, 가장 큰 이유는 이렇게 좋은 사람을 만날 수 있었기 때문이다. 덕분에 연말에 오랜만에 개발 외적인 책을 펼쳐봤다.</p>
<h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="개요">개요<a href="https://egg528.github.io/the-cafe-on-the-edge-of-the-world#%EA%B0%9C%EC%9A%94" class="hash-link" aria-label="개요에 대한 직접 링크" title="개요에 대한 직접 링크">​</a></h2>
<hr>
<p>주인공 존은 일과 일상에서부터 자유로워지기 위해 여행을 떠난다. 하지만 예기치 못한 사고로 도로가 막혀 오도 가도 못하는 상황에서 계획과 다른 길로 방향을 튼다.
계획에 없던 길이었기에 길을 헤매이다 연료가 거의 다 떨어진 시점, 우연히 불이 켜진 카페(세상 끝의 카페)를 발견한다.</p>
<p>길을 헤매이며 허기진 존은 음식을 주문한다. 하지만 세상 끝의 카페의 메뉴판에는 음식들과 함께 3가지 질문이 적혀있다.</p>
<div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">1. 당신은 왜 여기 있습니까?</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">2. 죽음이 두렵습니까?</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">3. 충만한 삶을 살고 있습니까?</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>허기를 달래기 위해 카페에 들어온 존은 예기치 못한 3가지 질문을 마주하게 되고 종업원 케이시, 먼저 온 손님 앤, 주방장 마이크의 이야기를 들으며 3가지 질문이 어떤 의미를 가지고 있는지, 왜 필요한지를 이해하게 되며 세상을 바라보는 관점에 변화를 맞이한다.</p>
<br>
<h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="파도-위의-녹색-바다거북-이야기">파도 위의 녹색 바다거북 이야기<a href="https://egg528.github.io/the-cafe-on-the-edge-of-the-world#%ED%8C%8C%EB%8F%84-%EC%9C%84%EC%9D%98-%EB%85%B9%EC%83%89-%EB%B0%94%EB%8B%A4%EA%B1%B0%EB%B6%81-%EC%9D%B4%EC%95%BC%EA%B8%B0" class="hash-link" aria-label="파도 위의 녹색 바다거북 이야기에 대한 직접 링크" title="파도 위의 녹색 바다거북 이야기에 대한 직접 링크">​</a></h2>
<hr>
<p>세상 끝의 카페는 내가 현재 정말로 원하는 것이 무엇인지를 알아야 한다 말한다. 대다수의 사람들은 일을 열심히 해서 나중에 보상을 받기를 원하거나 지금 하는 일을 관성처럼 하면서 살아간다. 하지만 현재에 내가 하고 싶은 것, 원하는 것을 찾아야 하고 이는 곧 <code>당신은 왜 여기에 있습니까?</code>와 연결된다.</p>
<p>현재 내가 원하는 것을 아는 게 꼭 필요할까? 케이시는 의문에 대한 해답으로 바다 거북 이야기를 들려준다. 거북이가 느릴 거라 생각하지만 실제로는 굉장히 빠르고 잡으려고 따라가면 절대 따라갈 수 없다. 그런데 바다 거북의 이동에는 비밀이 있다. 바로 자신이 가고자 하는 파도를 기다리고 이용한다는 것이다. 만약 자신이 가고자 하는 방향을 거스르는 파도가 온다면 바다 거북은 자신이 원하는 파도를 기다리며 체력을 회복한다.</p>
<p>우리는 일상에서 예기치 못한 다양한 일을 겪게 되고 모든 일에 최선을 다해 발버둥치다 보면 정작 필요한 순간에 에너지가 없을 수 있다. 하지만 내가 정말 원하는 게 무엇인지 알고 있다면 바다 거북처럼 내가 원하지 않는 일에는 체력을 회복하고 정말 원하는 일이 있을 때 에너지를 쏟을 수 있다.</p>
<br>
<h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="원하지도-않는-일을-하는-이유">원하지도 않는 일을 하는 이유<a href="https://egg528.github.io/the-cafe-on-the-edge-of-the-world#%EC%9B%90%ED%95%98%EC%A7%80%EB%8F%84-%EC%95%8A%EB%8A%94-%EC%9D%BC%EC%9D%84-%ED%95%98%EB%8A%94-%EC%9D%B4%EC%9C%A0" class="hash-link" aria-label="원하지도 않는 일을 하는 이유에 대한 직접 링크" title="원하지도 않는 일을 하는 이유에 대한 직접 링크">​</a></h2>
<hr>
<p>내가 무엇을 원하는지 잘못 알고 있는 경우도 있을 수 있다. 먼저 온 손님 앤은 광고에 대해 얘기한다. 앤의 말을 빌리자면 세상의 온갖 광고는 상품을 구매하면 인생에 의미가 생긴다거나 인생이 행복해지는 것처럼 표현한다. 또한 이런 메시지는 상품을 구매히자 않으면 인생에 행복과 의미가 없다는 내용을 내포한다.
앤은 자신이 이런 상품을 구매하기를 원했고 이를 위해 자신의 시간을 써가며 돈을 벌었다고 말한다. 하지만 정작 물건을 샀을 때 인생에 행복과 의미가 앤에게 찾아오지는 않았다. 앤은 이러한 악순환(광고 -&gt; 일 -&gt; 물건 구매 -&gt; 큰 만족 없음)의 원인을 자신이 정말로 원하는 것이 무엇인지 잘못 알고 있었기 때문이라 말한다.</p>
<p>이러한 악순환을 방지하기 위해서라도 우리는 현재 스스로가 원하는 것을 명확히 알고 있을 필요가 있다.</p>
<br>
<h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="죽음이-두렵습니까">죽음이 두렵습니까?<a href="https://egg528.github.io/the-cafe-on-the-edge-of-the-world#%EC%A3%BD%EC%9D%8C%EC%9D%B4-%EB%91%90%EB%A0%B5%EC%8A%B5%EB%8B%88%EA%B9%8C" class="hash-link" aria-label="죽음이 두렵습니까?에 대한 직접 링크" title="죽음이 두렵습니까?에 대한 직접 링크">​</a></h2>
<hr>
<p>갑작기 죽음이란 단어가 어색해 보일 수 있다. 내가 현재 원하는 게 무엇인지 명확히 알고 이를 실천하는 삶을 산다면 죽음이 무섭지 않다는 걸까? 그건 아니다 다만 미래를 위해 현재를 희생하며 살아갔을 때 죽음이 찾아온다면 삶에서 희생만 하다 가는 것 아닌가.</p>
<p>현재 내가 정말로 원하는 것을 하고 있다면 내가 죽는다 하더라도 내가 살아가던 방식에 후회가 없을 것이고 나는 최선의 삶을 살고 있었던 것이니 후회가 적을 것이고 갑작스런 죽음에 아쉬움이 덜하다는 정도로 이해했다.</p>
<p>이 내용은 스티브 잡스의 스탠포드 연설 중 매일 아침 거울을 보며 <code>내일 죽어도 이 일을 하고 있을 것인가?</code>라는 질문을 던졌고 No라는 대답이 나오면 방향을 바꿨다는 말과도 비슷한 내용이라 느꼈졌다.</p>
<br>
<h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="당신은-충만한-삶을-살고-있습니까">당신은 충만한 삶을 살고 있습니까?<a href="https://egg528.github.io/the-cafe-on-the-edge-of-the-world#%EB%8B%B9%EC%8B%A0%EC%9D%80-%EC%B6%A9%EB%A7%8C%ED%95%9C-%EC%82%B6%EC%9D%84-%EC%82%B4%EA%B3%A0-%EC%9E%88%EC%8A%B5%EB%8B%88%EA%B9%8C" class="hash-link" aria-label="당신은 충만한 삶을 살고 있습니까?에 대한 직접 링크" title="당신은 충만한 삶을 살고 있습니까?에 대한 직접 링크">​</a></h2>
<hr>
<p>우리가 무엇을 배우며 자랐건, 어떤 광고를 접하며 살았건, 어떤 일을 하며 어떤 스트레스를 받았건 결국 우리 삶을 만들어 나가는 건 자신이다. 내가 현재 하고 싶은 것, 원하는 것을 명확히 알고 있다고 하더라도 스스로 실천하지 않으면 모르고 있는 것과 다르지 않을 것이다. 결국 마지막 질문은 내가 세상에 존재하는 이유 즉, 내가 원하는 것을 충분히 하면서 삶을 충만하게 만들어가고 있는지를 묻고 있다고 이해할 수 있다.</p>
<br>
<h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="내가-없어도-존재할-아름다운-것들">내가 없어도 존재할 아름다운 것들<a href="https://egg528.github.io/the-cafe-on-the-edge-of-the-world#%EB%82%B4%EA%B0%80-%EC%97%86%EC%96%B4%EB%8F%84-%EC%A1%B4%EC%9E%AC%ED%95%A0-%EC%95%84%EB%A6%84%EB%8B%A4%EC%9A%B4-%EA%B2%83%EB%93%A4" class="hash-link" aria-label="내가 없어도 존재할 아름다운 것들에 대한 직접 링크" title="내가 없어도 존재할 아름다운 것들에 대한 직접 링크">​</a></h2>
<hr>
<p>온갖 일들에 둘러 쌓여 스트레스를 받고 있는 상황에서 세상은 스트레스가 가득한 곳이다. 하지만 내가 세상을 스트레스 가득한 곳이라 생각하는 와중에도 누군가는 세상을 충만한 곳으로 느끼고 있을 수 있다. 뿐만 아니라 내가 충만하게 느낄 수 있는 세상도 분명 존재하고 있을 것이다.</p>
<p>그러니 내가 바라보는 세상이 부정적인 공간이라면, 어딘가에 존재하는 충만한 세상을 찾아 나서보는 것도 나쁘지 않을 것 같다.</p>
<br>
<h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="내-생각">내 생각<a href="https://egg528.github.io/the-cafe-on-the-edge-of-the-world#%EB%82%B4-%EC%83%9D%EA%B0%81" class="hash-link" aria-label="내 생각에 대한 직접 링크" title="내 생각에 대한 직접 링크">​</a></h2>
<hr>
<p>세상 끝의 카페라는 책은 교훈적인 성향이 강하다. 3가지 질문에 대해 독자가 왜 대답을 해야하는지 설득하며 자신만의 정답을 찾았을 때 달라지는 것들에 대해 설명한다. 마치 책을 읽으며 인생 컨설팅(?)을 받는 느낌이 들었다.</p>
<p>저자는 책을 읽으며 독자가 본인 인생에 3가지 질문을 던져보고 각자의 해답을 찾아보기를 원했을 것이다. 하지만 나는 책을 읽으며 홍석이가 왜 이 책을 좋아했을지, 왜 나에게 이 책을 추천했을지를 더 많이 생각했던 것 같다.
내가 아는 홍석이는 열정적이고 계획적인 편인데, 특히 현재 자신이 무엇을 원하는지 알고 있고 명확하게 말하는 모습이 특별히 기억에 남는다. 홍석이의 그런에는 아마 이 책의 영향이 있지 않았을까 싶다.</p>
<p>나도 이 책을 계기로 내가 현재 무엇을 원하는지 더 세심히 살펴보고 싶다. 책에서도 나오지만 단시간에 해답을 찾을 수 있는 질문은 아니라 생각한다. 하지만 가끔이라도 이 질문을 떠올려보고 내가 인생을 잘 살아가고 있는지 확인해보는 정도로도 큰 도움이 되지 않을까 싶다.</p>]]></content:encoded>
            <category>book</category>
        </item>
    </channel>
</rss>